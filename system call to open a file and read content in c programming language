#include <stdlib.h>  // Standard library definitions
#include <fcntl.h>   // File control options
#include <unistd.h>  // Symbolic constants and types

int main() {
    // Open or create a file for read/write access, if it doesn't exist, create it with read/write permissions for the user
    int fd = open("example.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    
    if (fd == -1) {
        perror("Error opening file"); // Print error message if file opening fails
        exit(EXIT_FAILURE); // Exit program with failure status
    }

    // Write "Hello World" to the file
    char *message = "Hello World";
    if (write(fd, message, strlen(message)) == -1) {
        perror("Error writing to file"); // Print error message if writing fails
        close(fd); // Close file before exiting
        exit(EXIT_FAILURE); // Exit program with failure status
    }

    // Seek to the beginning of the file
    if (lseek(fd, 0, SEEK_SET) == -1) {
        perror("Error seeking file"); // Print error message if seeking fails
        close(fd); // Close file before exiting
        exit(EXIT_FAILURE); // Exit program with failure status
    }

    // Read content from the file
    char buffer[100]; // Buffer to store read content
    ssize_t bytes_read = read(fd, buffer, sizeof(buffer)); // Read from file
    if (bytes_read == -1) {
        perror("Error reading from file"); // Print error message if reading fails
        close(fd); // Close file before exiting
        exit(EXIT_FAILURE); // Exit program with failure status
    }

    // Null-terminate the buffer to treat it as a string
    buffer[bytes_read] = '\0';

    // Print the read content
    printf("Content read from file: %s\n", buffer);

    // Close the file
    if (close(fd) == -1) {
        perror("Error closing file"); // Print error message if closing fails
        exit(EXIT_FAILURE); // Exit program with failure status
    }

    return 0; // Exit program with success status
}
